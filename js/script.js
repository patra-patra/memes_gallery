// –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ category.html
document.querySelectorAll(".menu li ul li a").forEach((link) => {
    link.addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    });
});

document.addEventListener("DOMContentLoaded", () => {
    const currentPage = window.location.pathname;
    if (currentPage.includes("category.html")) {
        // –¥–ª—è category.html ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–µ –≤ category.js
        return;
    }
    // –î–ª—è index.html —Å–∫—Ä–∏–ø—Ç index.js
});

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function getCategoryAndSubcategory(tag) {
    const categoryMap = {
        '–ö–æ—Ç—ã': { category: 'animals', subcategory: 'cats' },
        '–ö–æ—à–∫–∏': { category: 'animals', subcategory: 'cats' },
        '–°–æ–±–∞–∫–∏': { category: 'animals', subcategory: 'dogs' },
        '–î—Ä—É–≥–∏–µ': { category: 'animals', subcategory: 'other' },
        '–ò—Ä–æ–Ω–∏—è': { category: 'abstract', subcategory: 'irony' },
        '–ü–æ—Å—Ç–∏—Ä–æ–Ω–∏—è': { category: 'abstract', subcategory: 'postirony' },
        '–ê–±—Å—É—Ä–¥': { category: 'abstract', subcategory: 'absurd' },
        '–ê–Ω–∏–º–µ': { category: 'local', subcategory: 'anime' },
        '–ò–≥—Ä—ã': { category: 'local', subcategory: 'games' },
        'IT-–º–µ–º—ã': { category: 'local', subcategory: 'it' },
        '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ': { category: 'life', subcategory: 'student' },
        '–ë—ã—Ç–æ–≤—ã–µ': { category: 'life', subcategory: 'household' },
        '–û—Ñ–∏—Å–Ω—ã–µ': { category: 'life', subcategory: 'office' },
        '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ': { category: 'life', subcategory: 'regional' },
        '–ñ–∏–≤–æ—Ç–Ω—ã–µ': { category: 'animals' }
    };

    return categoryMap[tag] || null;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function openModal(meme) {
    const modal = document.getElementById("memeModal");
    const modalImage = document.getElementById("modalImage");
    const modalInfo = document.getElementById("modalInfo");

    if (!modal || !modalImage || !modalInfo) {
        console.error("Modal elements not found");
        return;
    }

    modalImage.src = meme.src;
    modalImage.alt = meme.title;
    
    const tagsHtml = meme.tags.map(tag => {
        const categoryInfo = getCategoryAndSubcategory(tag);
        if (categoryInfo) {
            const url = categoryInfo.subcategory 
                ? `category.html?category=${categoryInfo.category}&subcategory=${categoryInfo.subcategory}`
                : `category.html?category=${categoryInfo.category}`;
            return `<a href="${url}" class="modal-tag"><span>${tag}</span></a>`;
        }
        return `<span class="modal-tag"><span>${tag}</span></span>`;
    }).join('');
    
    modalInfo.innerHTML = `
        <div class='title_rating'>
            <h2>${meme.title}</h2>
            <p class="star">${meme.rating}</p>
        </div>
        <p><strong>–ì–æ–¥:</strong> ${meme.year || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <div class="modal-tags">${tagsHtml}</div>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${meme.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}</p>
        <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> <a href="${meme.source}" target="_blank">${meme.source}</a></p>
    `;

    modal.classList.remove("hidden");
}

// Easter egg functionality
const clickCounts = {};
const requiredClicks = 10;

function initializeEasterEgg(ratingDiv) {
    const id = ratingDiv.getAttribute("data-id");
    const card = ratingDiv.closest('.card');
    
    if (!clickCounts[id]) {
        clickCounts[id] = 0;
    }

    ratingDiv.addEventListener('click', () => {
        clickCounts[id]++;
        
        if (clickCounts[id] === requiredClicks) {
            // Add dancing animation
            card.classList.add('dancing-container');
            card.querySelector('img').classList.add('dancing');
            
            // Stop after 5 seconds
            setTimeout(() => {
                card.classList.remove('dancing-container');
                card.querySelector('img').classList.remove('dancing');
                clickCounts[id] = 0;
            }, 5000);
        }
    });
}

// Initialize easter egg for all rating divs
document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".rating").forEach(initializeEasterEgg);
});

// Disco Mode Easter Egg
let discoMode = false;
let discoBall = null;

document.addEventListener('keydown', (e) => {
    if (e.code === 'KeyD' && !discoMode) {
        discoMode = true;
        
        // Add disco ball
        discoBall = document.createElement('div');
        discoBall.className = 'disco-ball';
        discoBall.textContent = 'üíø';
        document.body.appendChild(discoBall);
        
        // Add disco mode to grid
        const grid = document.querySelector('.grid');
        if (grid) {
            grid.classList.add('disco-mode');
        }
        
        // Auto-disable after 5 seconds
        setTimeout(() => {
            if (discoBall) {
                discoBall.remove();
                discoBall = null;
            }
            if (grid) {
                grid.classList.remove('disco-mode');
            }
            discoMode = false;
        }, 5000);
    }
});

// Nyan Cat Easter Egg
const searchInput = document.getElementById('searchInput');
let nyanCatTimeout = null;

function createNyanCat() {
    const nyanCat = document.createElement('div');
    nyanCat.className = 'nyan-cat';
    
    const img = document.createElement('img');
    img.src = 'img/nyan-cat.gif';
    img.alt = 'Nyan Cat';
    
    nyanCat.appendChild(img);
    document.body.appendChild(nyanCat);
    
    // Remove the element after animation
    nyanCat.addEventListener('animationend', () => {
        nyanCat.remove();
    });
}

if (searchInput) {
    searchInput.addEventListener('input', (e) => {
        const searchText = e.target.value.toLowerCase().trim();
        
        // Clear previous timeout
        if (nyanCatTimeout) {
            clearTimeout(nyanCatTimeout);
        }
        
        // Check for secret word after a short delay
        nyanCatTimeout = setTimeout(() => {
            if (searchText === 'nyan cat') {
                createNyanCat();
            }
        }, 500);
    });
}
